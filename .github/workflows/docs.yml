name: Documentation

on:
  push:
    branches: [ main, master ]
    paths:
      - '**.py'
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - '**.py'
      - '**.md'
      - 'docs/**'
  workflow_dispatch:

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pydoc-markdown pdoc3 sphinx

    - name: Generate API documentation with pdoc
      run: |
        mkdir -p docs/api
        pdoc3 --html --output-dir docs/api weak_password_checker.py

    - name: Generate code documentation
      run: |
        mkdir -p docs/code
        python -m pydoc -w weak_password_checker
        mv *.html docs/code/ 2>/dev/null || true

    - name: Check documentation coverage
      run: |
        python -c "
        import ast
        import weak_password_checker
        
        # Simple docstring coverage check
        with open('weak_password_checker.py', 'r', encoding='utf-8') as f:
            tree = ast.parse(f.read())
        
        functions = [node for node in ast.walk(tree) if isinstance(node, ast.FunctionDef)]
        classes = [node for node in ast.walk(tree) if isinstance(node, ast.ClassDef)]
        
        total = len(functions) + len(classes)
        documented = sum(1 for node in functions + classes if ast.get_docstring(node))
        
        coverage = (documented / total * 100) if total > 0 else 100
        print(f'Documentation coverage: {coverage:.1f}% ({documented}/{total})')
        "

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/

  markdown-lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Lint Markdown files
      uses: DavidAnson/markdownlint-cli2-action@v13
      with:
        globs: '**/*.md'

  link-checker:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Check links in README
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/mlc_config.json'

    - name: Create link check config if not exists
      run: |
        mkdir -p .github
        if [ ! -f .github/mlc_config.json ]; then
          cat > .github/mlc_config.json << 'EOF'
        {
          "ignorePatterns": [
            {
              "pattern": "^http://localhost"
            },
            {
              "pattern": "^https://localhost"
            },
            {
              "pattern": "^http://192.168"
            },
            {
              "pattern": "^https://192.168"
            }
          ],
          "timeout": "10s",
          "retryOn429": true,
          "retryCount": 3,
          "fallbackRetryDelay": "30s",
          "aliveStatusCodes": [200, 206]
        }
        EOF
        fi