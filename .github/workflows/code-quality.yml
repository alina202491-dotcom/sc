name: Code Quality

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black isort flake8 pylint mypy radon

    - name: Check code formatting with Black
      run: |
        black --check --diff --color .

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff --color .

    - name: Lint with flake8
      run: |
        flake8 . --count --statistics --tee --output-file=flake8-report.txt

    - name: Lint with pylint
      run: |
        pylint weak_password_checker.py --output-format=text --reports=yes > pylint-report.txt || true

    - name: Type checking with mypy
      run: |
        mypy weak_password_checker.py --ignore-missing-imports --strict-optional --txt-report mypy-report

    - name: Calculate cyclomatic complexity
      run: |
        radon cc . --average --show-complexity > complexity-report.txt

    - name: Calculate maintainability index
      run: |
        radon mi . > maintainability-report.txt

    - name: Upload code quality reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: code-quality-reports
        path: |
          flake8-report.txt
          pylint-report.txt
          mypy-report/
          complexity-report.txt
          maintainability-report.txt

  auto-format:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: ${{ github.head_ref }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install formatters
      run: |
        python -m pip install --upgrade pip
        pip install black isort

    - name: Format code with Black
      run: |
        black .

    - name: Sort imports with isort
      run: |
        isort .

    - name: Check for changes
      id: verify-changed-files
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi

    - name: Commit changes
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "ðŸŽ¨ Auto-format code with Black and isort" -a || exit 0
        git push