name: Performance Testing

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run performance tests weekly
    - cron: '0 3 * * 1'
  workflow_dispatch:

jobs:
  performance-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark memory-profiler line-profiler

    - name: Create test hosts file
      run: |
        cat > test_hosts.csv << 'EOF'
        host,description
        httpbin.org,Test HTTP service
        example.com,Example domain
        google.com,Search engine
        github.com,Code repository
        stackoverflow.com,Q&A site
        EOF

    - name: Run performance benchmarks
      run: |
        python -c "
        import time
        import sys
        import weak_password_checker
        from concurrent.futures import ThreadPoolExecutor
        import requests
        
        print('=== Performance Benchmarks ===')
        
        # Test 1: Script initialization time
        start = time.time()
        checker = weak_password_checker.WeakPasswordChecker('test_hosts.csv', max_workers=5, timeout=5)
        init_time = time.time() - start
        print(f'Initialization time: {init_time:.3f}s')
        
        # Test 2: Password loading time
        start = time.time()
        passwords = checker.load_weak_passwords()
        load_time = time.time() - start
        print(f'Password loading time: {load_time:.3f}s')
        print(f'Loaded {len(passwords)} passwords')
        
        # Test 3: Host file parsing time
        start = time.time()
        hosts = checker.load_hosts()
        parse_time = time.time() - start
        print(f'Host parsing time: {parse_time:.3f}s')
        print(f'Loaded {len(hosts)} hosts')
        
        # Test 4: Memory usage estimation
        import psutil
        import os
        process = psutil.Process(os.getpid())
        memory_mb = process.memory_info().rss / 1024 / 1024
        print(f'Memory usage: {memory_mb:.1f} MB')
        
        print('=== Performance Test Completed ===')
        "

    - name: Profile memory usage
      run: |
        python -m memory_profiler -c "
        import weak_password_checker
        checker = weak_password_checker.WeakPasswordChecker('test_hosts.csv')
        hosts = checker.load_hosts()
        passwords = checker.load_weak_passwords()
        " > memory-profile.txt 2>&1 || echo "Memory profiling completed"

    - name: Check script performance with different worker counts
      run: |
        python -c "
        import time
        import weak_password_checker
        
        print('=== Worker Performance Test ===')
        
        workers = [1, 5, 10, 20]
        for worker_count in workers:
            start = time.time()
            checker = weak_password_checker.WeakPasswordChecker(
                'test_hosts.csv', 
                max_workers=worker_count, 
                timeout=3
            )
            setup_time = time.time() - start
            print(f'Workers: {worker_count:2d}, Setup time: {setup_time:.3f}s')
        "

    - name: Check dependency import times
      run: |
        python -c "
        import time
        import sys
        
        print('=== Import Performance ===')
        
        modules = ['pandas', 'requests', 'beautifulsoup4', 'openpyxl', 'urllib3']
        
        for module in modules:
            try:
                start = time.time()
                __import__(module.replace('-', '_').split('[')[0])
                import_time = time.time() - start
                print(f'{module:15s}: {import_time:.4f}s')
            except ImportError as e:
                print(f'{module:15s}: Import failed - {e}')
        "

    - name: Generate performance report
      run: |
        cat > performance-report.md << 'EOF'
        # Performance Test Results
        
        **Test Date:** $(date)
        **Python Version:** $(python --version)
        **Platform:** $(uname -a)
        
        ## Metrics
        - Script initialization and dependency loading
        - Memory usage profiling
        - Worker thread performance scaling
        - File I/O performance for hosts and passwords
        
        ## Files Tested
        - Main script: weak_password_checker.py
        - Test hosts: test_hosts.csv
        - Password dictionary: weak_passwords.txt
        
        EOF
        
        if [ -f memory-profile.txt ]; then
          echo "## Memory Profile" >> performance-report.md
          echo '```' >> performance-report.md
          head -20 memory-profile.txt >> performance-report.md
          echo '```' >> performance-report.md
        fi

    - name: Upload performance reports
      uses: actions/upload-artifact@v3
      with:
        name: performance-reports
        path: |
          performance-report.md
          memory-profile.txt

    - name: Clean up test files
      run: |
        rm -f test_hosts.csv memory-profile.txt